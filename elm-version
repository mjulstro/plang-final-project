import Html exposing (beginnerProgram, div, button, text)
import Html.Events exposing (onClick)
import List

main =
  beginnerProgram { model = model, view = view, update = update }
  
  
-- MODEL

type alias Model =
  { humans: List Villager
  , vampires: List Villager
  , aHumanIsDying: Bool
  }
  
model = 
  { humans = []
  , vampires = []
  , aHumanIsDying = False}
  
type alias Villager =
  { name : String
  , health : Int
  , strength : Int}



-- UPDATE

type Msg = AddHuman | AddVampire | Interact

update: Msg -> Model -> Model
update msg model =
  case msg of
    AddHuman ->
      let
        humanNames = ["Maggie", "Jack", "Jill", "Nathan", "Sam"]
      in
        { humans = List.append model.humans [{name = "Human", health = 5, strength = 2}]
        , vampires = model.vampires
        , aHumanIsDying = model.aHumanIsDying
        }

    AddVampire ->
      let
        vampireNames = ["Kanaya", "Victoire", "Horatio", "Everild", "Donovan"]
      in
        { humans = model.humans
        , vampires = List.append model.vampires [{name = "Vampire", health = 5, strength = 4}]
        , aHumanIsDying = model.aHumanIsDying}
      
    Interact ->
      model
        |> feedAllVampires
        |> healTheHumans
        |> huntTheVampires
      
      
-- VIEW

view model =
  div []
    [ button [ onClick AddHuman ] [ text "Add Human" ]
    , button [ onClick AddVampire ] [ text "Add Vampire" ]
    , button [ onClick Interact ] [ text "A Day Goes By" ]
    , div [] [ text (showModel model)]
    ]
    
-- showModel: Model -> String --NOTE: this type annotation doesn't work even though the function does
showModel model = 
  list model.vampires
    |> String.append (list model.humans)
    |> String.append "Your town contains: \n"
    {- NOTE: When I need to add in things like "Somebody died!" how do I do that?
    Maybe add a variable to the model and append the extra messages only if the
    variable is true? -}

list: List Villager -> String
list villagerList =
  case villagerList of
    [] -> ""
    [head] ->
      (toString head.strength)
        |> String.append ", Strength = "
        |> String.append (toString head.health)
        |> String.append ": Health = "
        |> String.append head.name
        |> String.append "\n"
        -- NOTE: how do I get the newline character to work?
    (head::tail) ->
      String.append (list [head]) (list tail)

feedAllVampires: Model -> Model
feedAllVampires thisModel =
  case thisModel.vampires of
    [] ->
      thisModel
    [head] ->
      feedOneVampire thisModel
    (head::tail) ->
      let
        headModel = feedOneVampire
          { population = thisModel.population
          , humans = thisModel.humans
          , vampires = [head]
          , humanNames = thisModel.humanNames
          , vampireNames = thisModel.vampireNames
          , humanIndex = thisModel.humanIndex
          , vampireIndex = thisModel.vampireIndex
          , aHumanIsDying = thisModel.aHumanIsDying
          }
        tailModel = feedAllVampires
          { population = thisModel.population
          , humans = thisModel.humans
          , vampires = tail
          , humanNames = thisModel.humanNames
          , vampireNames = thisModel.vampireNames
          , humanIndex = thisModel.humanIndex
          , vampireIndex = thisModel.vampireIndex
          , aHumanIsDying = thisModel.aHumanIsDying
          }
      in
      { population = 
        if headModel.population <= tailModel.population then
          headModel.population
        else
          tailModel.population
      , humans = List.concat [headModel.humans, tailModel.humans]
      , vampires = List.concat [headModel.vampires, tailModel.vampires]
      , humanNames = thisModel.humanNames
      , vampireNames = thisModel.humanNames
      , humanIndex = tailModel.humanIndex + 1
      , vampireIndex = tailModel.vampireIndex + 1
      , aHumanIsDying =
        if (headModel.aHumanIsDying || tailModel.aHumanIsDying) then
          True
        else
          False
      }

feedOneVampire: Model -> Model
feedOneVampire thisModel =
  let
    vampireIndex = thisModel.vampireIndex
    humanIndex = thisModel.humanIndex
    currHuman = get humanIndex thisModel.humans
    currVamp = get vampireIndex thisModel.vampires
    
    newHuman =
      case currHuman of
        Just currHuman ->
          { name = currHuman.name
          , health = currHuman.health - 1
          , strength = currHuman.strength
          }
        Nothing ->
          { name = "Drank From a Dead Guy"
          , health = 0
          , strength = 0
          }
    {- These filler characters should be deleted from the list by the end of this
    function. Their names will be useful in debugging if they ever show up. -}
    newVamp =
      case currVamp of
        Just currVamp ->
          { name = currVamp.name
          , health = currVamp.health + 1
          , strength = currVamp.strength
          }
        Nothing ->
          { name = "Dead Guy Tried to Drink"
          , health = 0
          , strength = 0
          }
          
    beforeVamps = List.take (vampireIndex - 1) thisModel.vampires
    afterVamps = List.drop vampireIndex thisModel.vampires
    beforeHumans = List.take (humanIndex - 1) thisModel.humans
    afterHumans = List.drop humanIndex thisModel.humans
    
    newHumans = 
      if newHuman.health <= 0 then
        List.concat [beforeHumans, afterHumans]
      else
        List.concat [beforeHumans, [newHuman], afterHumans]
    newVampires = 
      if newVamp.health <= 0 then
        List.concat [beforeVamps, afterVamps]
      else
        List.concat [(beforeVamps), [newVamp], afterVamps]
  in
    { population =
      if newHuman.health <= 0 then
        thisModel.population - 1
      else
        thisModel.population
    , humans = newHumans
    , vampires = newVampires
    , humanNames = thisModel.humanNames
    , vampireNames = thisModel.vampireNames
    , humanIndex = (thisModel.humanIndex + 1) % (List.length newHumans)
    , vampireIndex = (thisModel.vampireIndex + 1) % (List.length newVampires)
    , aHumanIsDying =
      if newHuman.health <= 2 then
        True
      else
        False
    }

healTheHumans: Model -> Model
healTheHumans thisModel =
  { population = thisModel.population
    , humans = heal thisModel.humans
    , vampires = thisModel.vampires
    , humanNames = thisModel.humanNames
    , vampireNames = thisModel.vampireNames
    , humanIndex = thisModel.humanIndex
    , vampireIndex = thisModel.vampireIndex
    , aHumanIsDying = thisModel.aHumanIsDying -- again, maybe change this later
    }

heal: List Villager -> List Villager
heal humans = 
  case humans of
    [] ->
      []
    [head] ->
      [{name = head.name
       , health = head.health + 1
       , strength = head.strength
       }]
    (head::tail) ->
      List.append (heal [head]) (heal tail)
      

huntTheVampires: Model -> Model
huntTheVampires thisModel =
  if thisModel.aHumanIsDying then
    let
      thisVampire =
        case get thisModel.vampireIndex thisModel.vampires of
          Just vamp ->
            vamp
          Nothing ->
            { name = "Tried to fight a nonexistent vampire"
            , health = 0
            , strength = 0
            }
      beforeVamps = List.take (thisModel.vampireIndex - 1) thisModel.vampires
      afterVamps = List.drop thisModel.vampireIndex thisModel.vampires
    in
    if ((sumStrength thisModel.humans) > thisVampire.strength) then
      { population = thisModel.population - 1
      , humans = thisModel.humans
      , vampires = List.concat [beforeVamps, afterVamps]
      , humanNames = thisModel.humanNames
      , vampireNames = thisModel.vampireNames
      , humanIndex = thisModel.humanIndex
      , vampireIndex = thisModel.vampireIndex
      , aHumanIsDying = thisModel.aHumanIsDying
      {- TODO: The above line will cause bugs if humans are brought near death from
      battle, but weren't dying before. Fix this someday. -}
      }
    else
      { population = thisModel.population - 1
      , humans = damage thisModel.humans (thisVampire.strength - (sumStrength thisModel.humans))
      , vampires = thisModel.vampires
      , humanNames = thisModel.humanNames
      , vampireNames = thisModel.vampireNames
      , humanIndex = thisModel.humanIndex
      , vampireIndex = thisModel.vampireIndex
      , aHumanIsDying = thisModel.aHumanIsDying
      {- TODO: The above line will cause bugs if humans are brought near death from
      battle, but weren't dying before. Fix this someday. -}
      }
  else
    thisModel

sumStrength: List Villager -> Int
sumStrength theseVillagers =
  case theseVillagers of
    [] -> 0
    [head] -> head.strength
    (head::tail) ->
      (head.strength + (sumStrength tail))
      -- NOTE: gives me a syntax error and idk why

damage: List Villager -> Int -> List Villager
damage theseVillagers strengthDiff =
  case theseVillagers of
    [] -> []
    [head] ->
      let
        newHealth = head.health - strengthDiff
      in
        if (newHealth <= 0) then
          []
        else
          [{ name = head.name
           , health = newHealth
           , strength = head.strength
           }]
    (head::tail) ->
      List.append (damage [head] strengthDiff) (damage tail strengthDiff)

get: Int -> List a -> Maybe a
get n xs =
  List.head (List.drop n xs)
