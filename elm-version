import Html exposing (beginnerProgram, div, button, text)
import Html.Events exposing (onClick)
import List

main =
  beginnerProgram { model = model, view = view, update = update }
  
  
-- MODEL

type alias Model =
  { humans: List Villager
  , vampires: List Villager
  , aHumanIsDying: Bool
  }
  
model = 
  { humans = []
  , vampires = []
  , aHumanIsDying = False
  }
  
type alias Villager =
  { name : String
  , health : Int
  , strength : Int}



-- UPDATE

type Msg = AddHuman | AddVampire | Interact

update: Msg -> Model -> Model
update msg model =
  case msg of
    AddHuman ->
      let
        humanNames = ["Maggie", "Jack", "Jill", "Nathan", "Sam"]
      in
        { humans = List.append model.humans [{name = "Human", health = 5, strength = 2}]
        , vampires = model.vampires
        , aHumanIsDying = False
        }

    AddVampire ->
      let
        vampireNames = ["Kanaya", "Victoire", "Horatio", "Everild", "Donovan"]
      in
        { humans = model.humans
        , vampires = List.append model.vampires [{name = "Vampire", health = 5, strength = 4}]
        , aHumanIsDying = model.aHumanIsDying
        }
      
    Interact ->
      model
        |> feedTheVampires
        |> healTheHumans
        -- |> huntTheVampires
      
      
-- VIEW

view model =
  div []
    [ button [ onClick AddHuman ] [ text "Add Human" ]
    , button [ onClick AddVampire ] [ text "Add Vampire" ]
    , button [ onClick Interact ] [ text "A Day Goes By" ]
    , div [] [ text (showModel model)]
    ]
    
-- showModel: Model -> String -- NOTE: this type annotation doesn't work even though the function does
showModel model = 
  list model.vampires
    |> String.append (list model.humans)
    |> String.append "Your town contains: \n"
    {- NOTE: make a helper function to add the "someone
    is dying!" text -}

list: List Villager -> String
list villagerList =
  case villagerList of
    [] -> ""
    [head] ->
      (toString head.strength)
        |> String.append ", Strength = "
        |> String.append (toString head.health)
        |> String.append ": Health = "
        |> String.append head.name
        |> String.append "\n"
        -- NOTE: how do I get the newline character to work?
    (head::tail) ->
      String.append (list [head]) (list tail)



-- FUNCTIONS

population: Model -> Int
population model =
  (List.length model.vampires) + (List.length model.humans)


checkDying: List Villager -> Bool
checkDying villagers = 
  case villagers of
  [] ->
    False
  [head] ->
    if (head.health <= 2) then
      True
    else
      False
  (head::tail) ->
    if head.health <= 2 then
      True
    else 
      checkDying tail


feedTheVampires: Model -> Model
feedTheVampires model =
  let
    numVamps = List.length model.vampires
    numHums = List.length model.humans
  in
  if (numHums == 0) then
    { humans = model.humans
    , vampires = damage model.vampires 1
    , aHumanIsDying = False
    }
  else if (numVamps > numHums) then
    let
      newHumans = damageSlowly model.humans numVamps
    in
    { humans = newHumans
    , vampires = heal model.vampires 1
    , aHumanIsDying = checkDying newHumans
    }

  else if (numHums > numVamps) then
    let
      bittenHumans = List.take numVamps model.humans
      safeHumans = List.drop numVamps model.humans
      newHumans = List.concat [safeHumans, (damage bittenHumans 1)]
    in
    { humans = newHumans
    , vampires = heal model.vampires 1
    , aHumanIsDying = checkDying newHumans
    }

  else
    let
      newHumans = damage model.humans 1        
    in
    { humans = newHumans
    , vampires = heal model.vampires 1
    , aHumanIsDying = checkDying newHumans
    }


damageSlowly: List Villager -> Int -> List Villager
damageSlowly villagers num =
  let
    firstDamage = num // (List.length villagers)
    midFight = damage villagers firstDamage
    leftover = num % (List.length villagers)
    moreHurt = List.take leftover midFight
  in
  List.concat [(List.drop leftover midFight), (damage moreHurt 1)]


healTheHumans: Model -> Model
healTheHumans model =
  let
    newHumans = heal model.humans 1
  in
  { humans = newHumans
  , vampires = model.vampires
  , aHumanIsDying = checkDying newHumans
  }

heal: List Villager -> Int -> List Villager
heal humans num = 
  case humans of
    [] ->
      []
    [head] ->
      [{name = head.name
       , health = head.health + num
       , strength = head.strength
       }]
    (head::tail) ->
      List.append (heal [head] num) (heal tail num)


huntTheVampires: Model -> Model
huntTheVampires model =
  if model.aHumanIsDying then
    let
      hums = model.humans
      vamps = model.vampires
      humStrength = sumStrength hums
      vamp = List.head vamps
      newHumans = 
        case vamp of
          Just vamp ->
            if vamp.strength > humStrength then
              damage hums (vamp.strength - humStrength)
            else
              hums
          Nothing ->
            hums
      newVampires =
        case vamp of
          Just vamp ->
            if vamp.strength < humStrength then
              List.drop 1 vamps
            else
              vamps
          Nothing ->
            vamps
    in
    { humans = newHumans
    , vampires = newVampires
    , aHumanIsDying = checkDying newHumans
    }
  else
    model

sumStrength: List Villager -> Int
sumStrength villagers =
  case villagers of
    [] -> 0
    [head] -> head.strength
    (head::tail) ->
      (head.strength + (sumStrength tail))
      -- NOTE: gives me a syntax error and idk why

damage: List Villager -> Int -> List Villager
damage villagers strengthDiff =
  case villagers of
    [] -> []
    [head] ->
      let
        newHealth = head.health - strengthDiff
      in
        if (newHealth <= 0) then
          []
        else
          [{ name = head.name
           , health = newHealth
           , strength = head.strength
           }]
    (head::tail) ->
      List.append (damage [head] strengthDiff) (damage tail strengthDiff)

get: Int -> List a -> Maybe a
get n xs =
  List.head (List.drop n xs)
